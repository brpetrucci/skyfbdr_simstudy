###
# Master template for accuracy skyline FBDR sim study

# slurm script runs ref script to get all the details
# dir is the name of the directory within simu_stclation/accuracy/
# n_lambda_stc, n_mu_stc, and n_psi_stc are the numbers of each rates
# model is which model we're in, unc is whether there's uncertainty, 
# and ext_singles is whether there are extant singletons

# read ranges
taxa <- readTaxonData("simulation/accuracy/" + dir + "/ranges/taxa_" + rep + ".tsv")

# if model is 1 or 3, there are fossil counts
if (model == 1 | model == 3) {
  # read fossil counts data
  k <- readFossilCountsFile("simulation/accuracy/" + dir + "/fossil_counts/k_" + rep + ".tsv",  header = true, taxa = taxa)
} 

# read time intervals
timeline <- readDataDelimitedFile("simulation/accuracy/" + dir + "/times.tsv")[1]

# start moves vector
moves = VectorMoves()

# set lambda_stcs
for (i in 1:n_lambda) {
  lambda_stc[i] ~ dnLognormal(-2, 0.5)

  moves.append( mvScale(lambda_stc[i], lambda = 0.01, weight = 3.0) )
  moves.append( mvScale(lambda_stc[i], lambda = 0.1, weight = 3.0) )
  moves.append( mvScale(lambda_stc[i], lambda = 1, weight = 3.0) )
}

# set mu_stcs
for (i in 1:n_mu) {
  mu_stc[i] ~ dnLognormal(-2, 0.5)
  
  moves.append( mvScale(mu_stc[i], lambda = 0.01, weight = 3.0) )
  moves.append( mvScale(mu_stc[i], lambda = 0.1, weight = 3.0) )
  moves.append( mvScale(mu_stc[i], lambda = 1, weight = 3.0) )
}

# set psi_stcs
for (i in 1:n_psi) {
  psi_stc[i] ~ dnExp(1)
 
  moves.append( mvScale(psi_stc[i], lambda = 0.01, weight = 3.0) )
  moves.append( mvScale(psi_stc[i], lambda = 0.1, weight = 3.0) )
  moves.append( mvScale(psi_stc[i], lambda = 1, weight = 3.0) )
}

# correct lambda, mu, and psi sizes
if (lambda_stc.size() == 1) lambda := rep(lambda_stc[1], timeline.size() + 1) else lambda := lambda_stc
if (mu_stc.size() == 1) mu := rep(mu_stc[1], timeline.size() + 1) else mu := mu_stc
if (psi_stc.size() == 1) psi := rep(psi_stc[1], timeline.size() + 1) else psi := psi_stc

# set rho based on ext_singles
rho <- ifelse(ext_singles, 1, 0) 

# set binary based on model
if (model == 3) binary <- TRUE else binary <- FALSE

# define FBDR matrix based on model
if (model == 2) {
  bd ~ dnFBDRMatrix(taxa = taxa, lambda = lambda, mu = mu, psi = psi, rho = rho, timeline = timeline, condition = "time")
} else {
  bd ~ dnFBDRMatrix(taxa = taxa, k = k, lambda = lambda, mu = mu, psi = psi, rho = rho, timeline = timeline, condition = "time", binary = binary)
}

# check if this is extant_singletons
if (ext_singles) {
  # get fossil taxa only for moves
  fcount <- 1
  for (i in 1:taxa.size()) {
    if (taxa[i].getMinAge() == 0 && taxa[i].getMaxAge() == 0) {
      fossil_taxa[fcount] <- taxa[i]

      fcount <- fcount + 1
    }
  }
} else {
  fossil_taxa <- taxa
} 

moves.append( mvMatrixElementScale(bd, lambda = 0.01, weight=fossil_taxa.size()/100))
moves.append( mvMatrixElementScale(bd, lambda = 0.1, weight=fossil_taxa.size()/100))
moves.append( mvMatrixElementScale(bd, lambda = 1, weight=fossil_taxa.size()/100))

moves.append( mvMatrixElementSlide(bd, delta = 0.01, weight=fossil_taxa.size()/100))
moves.append( mvMatrixElementSlide(bd, delta = 0.1, weight=fossil_taxa.size()/100))
moves.append( mvMatrixElementSlide(bd, delta = 1, weight=fossil_taxa.size()/100))

mymodel = model(bd)

monitors = VectorMonitors()

# Create a vector of monitors #
monitors.append( mnModel(filename="output/accuracy/" + dir + "/skyfbdr_" + rep + ".log", printgen=10000) )
monitors.append( mnScreen(printgen = 1000000) )

# Initialize the MCMC object #
mymcmc = mcmc(mymodel, monitors, moves)

# Run the MCMC #
mymcmc.run(generations=5000000)

# Quit RevBayes #
q()
